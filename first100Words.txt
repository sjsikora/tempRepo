There are numerous benefits of writing unit tests; they help with regression, provide documentation, and facilitate good design. However, hard to read and brittle unit tests can wreak havoc on your code base. This article describes some best practices regarding unit test design for your .NET Core and .NET Standard projects. In this guide, you learn some best practices when writing unit tests to keep your tests resilient and easy to understand. By John Reese with special thanks to Roy Osherove. Why unit test? There are several reasons to use unit tests. Less time performing functional tests. Functional tests are